[case-study]
name = hierarchical_molecular_tktd
scenario = hierarchical_cext_nested_sigma_hyperprior_informed_reduced_dataset_rna_pulse_5
package = ..
modules = sim mod prob data plot
simulation = NomixHierarchicalSimulation
data = ../tktd_rna_pulse/data
observations = tox.db
logging = DEBUG

[simulation]
model = tktd_rna_5
solver = JaxSolver
solver_post_processing = survival
y0 = cext=cext_nom cint=Array([0]) nrf2=Array([1]) P=Array([0]) H=Array([0])
x_in = 
input_files = 
n_ode_states = 5
batch_dimension = id
x_dimension = time
modeltype = deterministic
seed = 4
prior_dimensions = substance

# data selection
# --------------------
hpf = 24
substance = diuron diclofenac naproxen

# experiment selection
# --------------------
# the IDs may change when the database is rewritten. Therefore it is potentially
# unsafe to exclude experiments by ID. Better would be a (name, date) pair. Or
# even better would be not to overwrite the database each time I change the layout,
# but to modify the database.
# eid=2 is the Diuron experiment by Kodritsch. This has quite a different relation
# between Ci and Ce. Assuming cext_nom here would probably be better.
# Kodritsch data has IDs: 1,2,3,7,10
# Knapp Data from Diclofenac are also extremely differen
exclude_experiments = 15 16 18 31 42 45 46 2 37 38 39
exclude_treatments = 205


[data-structure]
cext = dimensions=['id','time'] min=2.2453306906554733 max=514.382187237679 observed=False
cint = dimensions=['id','time'] min=1e-08 max=6582.763087754983 observed=True
nrf2 = dimensions=['id','time'] min=0.6215531717356583 max=3.806557074337876 observed=True
P = dimensions=['id','time'] min=nan max=nan observed=False
H = dimensions=['id','time'] min=nan max=nan observed=False
survival = dimensions=['id','time'] min=0.0 max=18.0 observed=True
lethality = dimensions=['id','time'] min=0.0 max=18.0 observed=False

[model-parameters]
error_scale = value=0.0 dims=[] prior=lognorm(scale=1.0,s=0.1) hyper=True free=True
error_scale_sigma = value=0.0 dims=[] prior=halfnorm(scale=0.1) hyper=True free=True
sigma_experiment = value=0.0 dims=['experiment_id'] prior=lognorm(scale=error_scale,s=error_scale_sigma) hyper=False free=True
cext_y0 = value=0.0 dims=['id'] prior=deterministic(value=cext_y0*sigma_experiment[experiment_id_index]) hyper=False free=True
k_i_substance = value=[5.0,0.5,0.5] dims=['substance'] prior=lognorm(scale=[1.0,1.0,1.0],s=2) hyper=True free=True
r_rt_substance = value=[0.1,0.1,0.1] dims=['substance'] prior=lognorm(scale=[1.0,1.0,1.0],s=2) hyper=True free=True
r_rd_substance = value=[0.5,0.5,0.5] dims=['substance'] prior=lognorm(scale=[0.5,0.5,0.5],s=2) hyper=True free=True
v_rt_substance = value=[1.0,1.0,1.0] dims=['substance'] prior=lognorm(scale=[10.0,10.0,10.0],s=2) hyper=True free=True
z_ci_substance = value=[1.0,1.0,1.0] dims=['substance'] prior=lognorm(scale=[0.5,0.5,0.5],s=2) hyper=True free=True
k_p_substance = value=[0.1,0.02,0.02] dims=['substance'] prior=lognorm(scale=[0.02,0.02,0.02],s=2) hyper=True free=True
k_m_substance = value=[0.01,0.01,0.01] dims=['substance'] prior=lognorm(scale=[0.05,0.05,0.05],s=2) hyper=True free=True
h_b_substance = value=[1e-07,1e-07,1e-07] dims=['substance'] prior=lognorm(scale=[1e-08,1e-08,1e-08],s=2) hyper=True free=True
z_substance = value=[1.0,1.0,1.0] dims=['substance'] prior=lognorm(scale=[1.0,1.0,1.0],s=2) hyper=True free=True
kk_substance = value=[0.02,0.02,0.02] dims=['substance'] prior=lognorm(scale=[0.02,0.02,0.02],s=2) hyper=True free=True
sigma_nrf2 = value=1.0 dims=[] prior=halfnorm(scale=5.0) hyper=False free=True
sigma_cint = value=0.1 dims=[] prior=halfnorm(scale=5.0) hyper=False free=True
ci_max_substance = value=[1757.0,168.1,6364.8] dims=['substance'] prior=deterministic(value=[1757.0,168.1,6364.8]) hyper=False free=True
ci_max = value=1000.0 dims=['id'] prior=deterministic(value=ci_max_substance[substance_index]) hyper=False free=True
k_i = value=0.5 dims=['id'] prior=deterministic(value=k_i_substance[substance_index]) hyper=False free=True
r_rt = value=0.1 dims=['id'] prior=deterministic(value=r_rt_substance[substance_index]) hyper=False free=True
r_rd = value=0.5 dims=['id'] prior=deterministic(value=r_rd_substance[substance_index]) hyper=False free=True
v_rt = value=1.0 dims=['id'] prior=deterministic(value=v_rt_substance[substance_index]) hyper=False free=True
z_ci = value=50.0 dims=['id'] prior=deterministic(value=z_ci_substance[substance_index]) hyper=False free=True
k_p = value=0.05 dims=['id'] prior=deterministic(value=k_p_substance[substance_index]) hyper=False free=True
k_m = value=0.01 dims=['id'] prior=deterministic(value=k_m_substance[substance_index]) hyper=False free=True
h_b = value=1e-07 dims=['id'] prior=deterministic(value=h_b_substance[substance_index]) hyper=False free=True
z = value=1.0 dims=['id'] prior=deterministic(value=z_substance[substance_index]) hyper=False free=True
kk = value=0.02 dims=['id'] prior=deterministic(value=kk_substance[substance_index]) hyper=False free=True
r_0 = value=1.0 dims=[] hyper=False free=False

[error-model]
cint = normal(loc=0,scale=sigma_cint,obs=jnp.log(obs/(cint+1e-8)),obs_inv=jnp.exp(res)*cint)
nrf2 = normal(loc=0,scale=sigma_nrf2,obs=jnp.log(obs/(nrf2+1e-8)),obs_inv=jnp.exp(res)*nrf2)
survival = binom(p=survival,n=nzfe)

[multiprocessing]
cores = 1

[inference]
eps = 1e-08
objective_function = objective_average
n_objectives = 1
objective_names = 
backend = numpyro
extra_vars = nzfe substance_index survivors_before_t
n_predictions = 1000

[inference.pyabc]
sampler = SingleCoreSampler
population_size = 100
minimum_epsilon = 1e-05
min_eps_diff = 1e-07
max_nr_populations = 100
database_path = pyabc.db

[inference.pyabc.redis]
password = simulate
port = 1803
eval.n_predictions = 50
eval.history_id = -1
eval.model_id = 0

[inference.pymoo]
algortihm = UNSGA3
population_size = 1000
max_nr_populations = 100
ftol = 0.01
xtol = 0.001
cvtol = 1e-07
verbose = True

[inference.numpyro]
gaussian_base_distribution = True
user_defined_error_model = conditional_survival_hazard_error_model
kernel = svi
init_strategy = init_to_sample
chains = 1
draws = 2000
warmup = 1000
thinning = 1
nuts_draws = 2000
nuts_step_size = 0.8
nuts_max_tree_depth = 10
nuts_target_accept_prob = 0.8
nuts_dense_mass = True
svi_iterations = 10000
svi_learning_rate = 0.005

[solverbase]
x_dim = time
exclude_kwargs_model = t time x_in y x Y X
exclude_kwargs_postprocessing = t time interpolation results

[jax-solver]
x_dim = time
exclude_kwargs_model = t time x_in y x Y X
exclude_kwargs_postprocessing = t time interpolation results
diffrax_solver = Dopri5
rtol = 0.001
atol = 1e-06
pcoeff = 0.2
icoeff = 0.4
dcoeff = 0.0
max_steps = 100000
throw_exception = False

